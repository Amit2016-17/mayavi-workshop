cells:

- markdown: |
    # Using `mayavi.mlab`: getting started

    **Prabhu Ramachandran**

    **Department of Aerospace Engineering, IIT Bombay**
    <br/>

    **NGCM Summer School,**
    **Southampton, June 2018**


  metadata:
    slideshow:
      slide_type: slide

- markdown: |
    ## Outline

    - Getting started with `mlab`
    - Using `mlab`
       - The basics
       - Animation
    - Going deeper
       - The pipeline
       - Data sources

  metadata:
    slideshow:
      slide_type: slide

- markdown: |
    ## Getting started with `mlab`

  metadata:
    slideshow:
      slide_type: slide

- markdown: |
    ## Overview

    * Simple

    * Convenient

    * Full-featured


  metadata:
    slideshow:
      slide_type: slide

- markdown: |
    ## Getting started

    With `jupyter`,

    ```
    $ jupyter console
    In [1]: %gui qt
    ```

    with IPython,

    ```
    $ ipython --gui=qt
    ```

    or

    ```
    $ ipython
    In [1]: %gui qt
    ```

  metadata:
    slideshow:
      slide_type: slide

- markdown: |
    ## Using notebooks

    Make sure you have the following code first


  metadata:
    slideshow:
      slide_type: slide

- code: |
    %gui qt


- markdown: |

    * All plots will pop-up a window

    * Inline support will be covered later

    * May need to set env var
       * `export QT_API=pyqt`
       * `export QT_API=pyside`


- markdown: |
    ## Troubleshooting

    * Which version of Python?

    * Version of VTK?

    * Version of Qt?

    * Post on slack channel


  metadata:
    slideshow:
      slide_type: slide

- markdown: |
    ## Please type along in a fresh Jupyter notebook

  metadata:
    slideshow:
      slide_type: slide

- markdown: |
    ## Using `mlab`

  metadata:
    slideshow:
      slide_type: slide

- code: |
    from mayavi import mlab

- markdown: |

    Try these

- code: |
    mlab.test_<TAB>

- code: |
    mlab.test_contour3d()

  metadata:
    slideshow:
      slide_type: fragment

- code: |
    mlab.test_contour3d??


- markdown: |
    ## Exploring the view

    <img src="MEDIA/m2/contour3d.png" height="60%" />

    * Mouse
    * Keyboard
    * Toolbar
    * Mayavi icon ![Mayavi icon](MEDIA/m2/m2_icon.png)

  metadata:
    slideshow:
      slide_type: slide

- markdown: |
    ## Using `mlab`: the basics

  metadata:
    slideshow:
      slide_type: slide


- markdown: |
    ## `mlab` plotting functions: 0D data
    <img src="MEDIA/m2/mlab/points3d_ex.png" height="40%" />

  metadata:
    slideshow:
      slide_type: slide

- code: |
    import numpy as np
    from numpy import *

- code: |
    t = linspace(0, 2*pi, 50)
    u = cos(t)*pi
    x, y, z = sin(u), cos(u), sin(t)

- code: |
    mlab.points3d(x, y, z)


- markdown: |
    ## Changing how things look

    ### Clearing the view

  metadata:
    slideshow:
      slide_type: slide

- code: |
    mlab.clf()

- markdown: |
    ### IPython is your friend!

- code: |
    mlab.points3d?

- markdown: |

    * Extra argument: Scalars
    * Keyword arguments
    * UI

  metadata:
    slideshow:
      slide_type: fragment

- code: |
    mlab.points3d(x, y, z, t, scale_mode='none')

  metadata:
    slideshow:
      slide_type: fragment

- markdown: |
    ### 1D data

    <img src="MEDIA/m2/mlab/plot3d_ex.png" height="80%"/>

  metadata:
    slideshow:
      slide_type: slide

- code: |
    mlab.clf()
    mlab.plot3d(x, y, z, t)

- markdown: |

    Plots lines between the points


- markdown: |
    ## Exercise

    Visualize a helical spring with a spherical mass on one of its ends with a
    fixed color for both.

  metadata:
    slideshow:
      slide_type: slide

- markdown: |
    ## Solution

  metadata:
    slideshow:
      slide_type: slide

- code: |
    mlab.clf()

    t = linspace(0, 10*pi, 1000)
    x, y = 0.2*sin(t), 0.2*cos(t)
    z = 0.1*t
    mlab.plot3d(x, y, z, color=(1, 0, 0))
    mlab.points3d(x[-1:], y[-1:], z[-1:])

- code: |
    mlab.clf()

- markdown: |
    ## An aside: `np.mgrid`

  metadata:
    slideshow:
      slide_type: slide

- code: |
    from numpy import mgrid

- code: |
    mgrid[0:3,0:3]

- code: |
    mgrid[-1:1:5j]


- markdown: |
    ## Example

  metadata:
    slideshow:
      slide_type: slide

- code: |
    x, y = mgrid[-1:1:5j, -1:1:5j]
    z = x*x + y*y

- code: |
    z

- markdown: |
    ## 2D data: `mlab.surf`
    <img src="MEDIA/m2/mlab/surf_ex.png" height="30%" />

  metadata:
    slideshow:
      slide_type: slide

- code: |
    x, y = mgrid[-3:3:100j,-3:3:100j]
    z = sin(x*x + y*y)

- code: |
    mlab.surf(x, y, z)

- markdown: |
    Assumes the points are rectilinear

- markdown: |
    ## 2D data: `mlab.contour_surf`

    <img src="MEDIA/m2/mlab/contour_surf_ex.png" height="50%"/>

  metadata:
    slideshow:
      slide_type: slide

- code: |
    x, y = mgrid[-3:3:100j,-3:3:100j]
    z = sin(x*x + y*y)

- code: |
    mlab.clf()
    mlab.contour_surf(x, y, z)

- markdown: |
    Assumes the points are rectilinear

- markdown: |
    ## 2D data: `mlab.mesh`

  metadata:
    slideshow:
      slide_type: slide

- code: |
    mlab.clf()
    mlab.mesh(x, y, z)

- markdown: |

    Points need not be regular

- code: |
    x, y = mgrid[-3:3:100j,-3:3:100j]
    z = (x*x + y*y)*0.1
    mlab.mesh(sin(x), cos(y), z)

  metadata:
    slideshow:
      slide_type: fragment

- markdown: |
    Go ahead and experiment with other functions!

  metadata:
    slideshow:
      slide_type: fragment

- code: |
    mlab.clf()
    mlab.mesh(sin(x), cos(y), sin(x*y))

- markdown: |
    ## Exercise

    Plot the surface of a unit sphere using `mlab.mesh`  with a
    wireframe.

  metadata:
    slideshow:
      slide_type: slide

- markdown: |
    ## Solution

  metadata:
    slideshow:
      slide_type: slide

- code: |
    phi, theta = numpy.mgrid[0:pi:20j,
                            0:2*pi:20j]
    x = sin(phi)*cos(theta)
    y = sin(phi)*sin(theta)
    z = cos(phi)
    mlab.clf()
    mlab.mesh(x, y, z, representation='wireframe')


- markdown: |
    ## 2D data: `mlab.triangular_mesh`

    <img src="MEDIA/m2/mlab/triangular_mesh_ex.png"/>

  metadata:
    slideshow:
      slide_type: slide

- code: |
    x, y, z = [[0., 1., 1], [0., 0, 1],
               [0., 0, 0]]
    t = [[0, 1, 2]]

- code: |
    mlab.clf()
    mlab.triangular_mesh(x, y, z, t)


- markdown: |
    Explicitly specify the triangles


- markdown: |
    ## Exercise

    Create a simple pyramid composed of triangles and plot it.


  metadata:
    slideshow:
      slide_type: slide

- markdown: |
    ## Solution

  metadata:
    slideshow:
      slide_type: slide

- code: |
    x = [0., 1, 1, 0, 0.5]
    y = [0., 0, 1, 1, 0.5]
    z = [0., 0, 0, 0, 1]
    t = [[0, 1, 4], [1, 2, 4],
         [2, 3, 4], [3, 0, 4]]
    mlab.clf()
    mlab.triangular_mesh(
        x, y, z, t, scalars=z
    )

- markdown: |
    ## 2D data: `mlab.imshow`

  metadata:
    slideshow:
      slide_type: slide

- code: |
    s = np.random.random((2<<12, 2<<12))
    s.size

- code: |
    mlab.clf()
    mlab.imshow(s)

- markdown: |
    Do not try this with `matplotlib`!


- markdown: |
    ## 3D data

    <img src="MEDIA/m2/mlab/contour3d.png" width="35%" height="50%" />

  metadata:
    slideshow:
      slide_type: slide

- code: |
    x, y, z = ogrid[-5:5:64j, -5:5:64j, -5:5:64j]
    mlab.clf()
    mlab.contour3d(x*x*0.5 + y*y + z*z*2)

- markdown: |
    ## 3D vector data: `mlab.quiver3d`

    <img src="MEDIA/m2/mlab/quiver3d_ex.png" width="35%" height="50%"/>

  metadata:
    slideshow:
      slide_type: slide

- code: |
    mlab.test_quiver3d()

- code: |
    o = mlab.quiver3d(x, y, z, u, v, w)


- markdown: |
    ## 3D vector data: `mlab.flow`

  metadata:
    slideshow:
      slide_type: slide

- code: |
    x, y, z = mgrid[-2:3, -2:3, -2:3]
    r = sqrt(x**2 + y**2 + z**4)
    u = y*sin(r)/(r+0.001)
    v = -x*sin(r)/(r+0.001)
    w = zeros_like(z)
    obj = mlab.flow(x, y, z, u, v, w,
                    seedtype='plane')


- markdown: |
    ## Exercise: Lorenz equation

    \begin{align}
    \frac{d x}{dt} &= s (y-x) \\
    \frac{d y}{d t} &= rx -y -xz \\
    \frac{d z}{d t} &= xy - bz \\
    \end{align}

    Let $ s=10,r=28, b=8./3$.

  metadata:
    slideshow:
      slide_type: slide

- markdown: |
    ## Exercise

    Consider the region of interest

  metadata:
    slideshow:
      slide_type: slide

- code: |
    x, y, z = mgrid[-50:50:20j, -50:50:20j, -10:60:20j]

- markdown: |
    * Hint: use `mlab.quiver3d`
    * Explore arguments to make the visualization better

- markdown: |
    ## Solution

  metadata:
    slideshow:
      slide_type: slide

- code: |
    def lorenz(x, y, z, s=10.,r=28., b=8./3):
        u = s*(y-x)
        v = r*x -y - x*z
        w = x*y - b*z
        return u, v, w

- code: |
    x, y, z = mgrid[-50:50:20j,-50:50:20j, -10:60:20j]
    u, v, w = lorenz(x, y, z)

- code: |
    mlab.clf()
    mlab.quiver3d(x, y, z, u, v, w,
                  scale_factor=0.01,
                  mask_points=5)

- markdown: |
    ## Another exercise

    * Try the same with `mlab.flow`
    * Use the UI to configure things


  metadata:
    slideshow:
      slide_type: slide

- markdown: |
    ## Solution

  metadata:
    slideshow:
      slide_type: slide

- code: |
    mlab.flow(x, y, z, u, v, w)

- markdown: |
    ## Digression exercise
    Plot the trajectory of a point starting at (10, 50, 50) for 50 seconds.

  metadata:
    slideshow:
      slide_type: slide

- markdown: |
    ## Solution

  metadata:
    slideshow:
      slide_type: slide

- code: |
    from scipy.integrate import odeint
    def lorenz_ode(state, t):
        x, y, z = state
        return np.array(lorenz(x, y, z))

- code: |
    t = np.linspace(0., 50., 2000)
    r = odeint(
        lorenz_ode, (10., 50., 50.), t
    )

- code: |
    x, y, z = r[:,0], r[:,1], r[:,2]
    mlab.plot3d(x, y, z, t, tube_radius=None)


- markdown: |
    ## Issues and solutions

    * Basic visualization: not very useful

    * Tweak parameters: `mask_points, scale_factor`
    * Explore parameters on UI


    * `mlab.flow`  is a lot better!

    **Good visualization involves work**

  metadata:
    slideshow:
      slide_type: slide

- markdown: |
    ## Other utility functions

    * `gcf` : get current figure


  metadata:
    slideshow:
      slide_type: slide

- markdown: |

    * `savefig`, `figure`

  metadata:
    slideshow:
      slide_type: fragment

- markdown: |

    * `axes`, `outline`

  metadata:
    slideshow:
      slide_type: fragment

- markdown: |

    * `title`, `xlabel, ylabel, zlabel`

  metadata:
    slideshow:
      slide_type: fragment

- markdown: |

    * `colorbar, scalarbar, vectorbar`

  metadata:
    slideshow:
      slide_type: fragment

- markdown: |

    * `show` : Standalone mlab scripts


  metadata:
    slideshow:
      slide_type: fragment

- markdown: |

    * `orientation_axes`, `text3d`

  metadata:
    slideshow:
      slide_type: fragment

- markdown: |
    ## More utility functions

    * `show_pipeline`
    * `view, roll, yaw, move`
    * Others, see UG


  metadata:
    slideshow:
      slide_type: slide

- markdown: |
    ## Setting the view

  metadata:
    slideshow:
      slide_type: slide

- code: |
    print(mlab.view())
    mlab.view(azimuth=None,
              elevation=None,
              distance=None,
              focalpoint=None)

- markdown: |
    ## Exercise

    Create a standalone Python script complete with axes, labels and a
    colorbar and save a png image of the rendered scene. Also show the window
    for a user to see the final plot and interact with it. Use any existing
    plot you have already made for this.

  metadata:
    slideshow:
      slide_type: slide


# The lines below here may be deleted if you do not need them.
# ---------------------------------------------------------------------------
metadata:
  celltoolbar: Slideshow
  language: python
  livereveal:
    controls: true
    help: true
    scroll: true
    slideNumber: true
    transition: none
nbformat: 4
nbformat_minor: 2
